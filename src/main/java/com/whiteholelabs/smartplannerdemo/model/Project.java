//
// Copyright 2024 (c) Chris Romero.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the “Software”), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
package com.whiteholelabs.smartplannerdemo.model;

import java.util.ArrayList;
import java.util.List;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverter;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/// The structure of the Project table.
@Data
@AllArgsConstructor
@NoArgsConstructor
@DynamoDBTable(tableName = "Projects")
public class Project {
    /// Unique identifier for this Project.
    private String ID;
    /// A descriptive name to identify this Project.
    private String title;
    /// A brief description.
    private String overview;
    /// Who created this.
    private String createdBy;
    /// When this Project was created.
    private String createdOn;
    /// A list of Activities pending assignment to a Worker.
    private List<String> activities;
    /// A list of all Workers associated to this Project and their assigned
    /// activities (tasks).
    private List<Worker> workers;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "ID")
    public String getID() {
        return this.ID;
    }

    @DynamoDBAttribute(attributeName = "title")
    public String getTitle() {
        return this.title;
    }

    @DynamoDBAttribute(attributeName = "overview")
    public String getOverview() {
        return this.overview;
    }

    @DynamoDBAttribute(attributeName = "createdBy")
    public String getCreatedBy() {
        return this.createdBy;
    }

    @DynamoDBAttribute(attributeName = "createdOn")
    public String getCreatedOn() {
        return this.createdOn;
    }

    @DynamoDBAttribute(attributeName = "activities")
    public List<String> getActivities() {
        return this.activities;
    }

    @DynamoDBTypeConverted(converter = WorkerTypeConverter.class)
    @DynamoDBAttribute(attributeName = "workers")
    public List<Worker> getWorkers() {
        return this.workers;
    }

    public void setID(String ID) {
        this.ID = ID;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setOverview(String overview) {
        this.overview = overview;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    public void setCreatedOn(String createdOn) {
        this.createdOn = createdOn;
    }

    public void setActivities(List<String> activities) {
        this.activities = activities;
    }

    @DynamoDBAttribute(attributeName = "workers")
    public void setWorkers(List<Worker> workers) {
        this.workers = workers;
    }

    /// Converts the Worker class to a valid structure for DynamoDB.
    static public class WorkerTypeConverter
            implements DynamoDBTypeConverter<List<AttributeValue>, List<Worker>> {
        @Override
        public List<AttributeValue> convert(List<Worker> workers) {
            List<AttributeValue> result = new ArrayList<AttributeValue>();
            try {
                if (workers != null) {
                    for (Worker worker : workers) {
                        List<AttributeValue> list = new ArrayList<AttributeValue>();
                        for (Task task : worker.getTasks()) {
                            list.add(new AttributeValue()
                                    .addMEntry("title", new AttributeValue().withS(task.getTitle()))
                                    .addMEntry("state", new AttributeValue().withN(Integer.toString(task.getState()))));
                        }
                        result.add(new AttributeValue()
                                .addMEntry("title", new AttributeValue().withS(worker.getTitle()))
                                .addMEntry("tasks", new AttributeValue().withL(list)));
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return result;
        }

        @Override
        public List<Worker> unconvert(List<AttributeValue> map) {
            List<Worker> workers = new ArrayList<Worker>();
            try {
                for (AttributeValue obj : map) {
                    Worker worker = new Worker();
                    worker.setTitle(obj.getM().get("title").getS());
                    List<Task> tasks = new ArrayList<Task>();
                    for (AttributeValue objL : obj.getM().get("tasks").getL()) {
                        Task task = new Task();
                        task.setTitle(objL.getM().get("title").getS());
                        task.setState(Integer.parseInt(objL.getM().get("state").getN()));
                        tasks.add(task);
                    }
                    worker.setTasks(tasks);
                    workers.add(worker);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return workers;
        }
    }
}
